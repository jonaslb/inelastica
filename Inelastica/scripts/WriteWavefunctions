#!/usr/bin/env python3
from __future__ import print_function

import scipy.linalg as SLA
import sys
import numpy as N
import Inelastica.EigenChannels as EC
import Inelastica.MakeGeom as MG
import Inelastica.io.siesta as SIO
import Inelastica.io.log as Log

# Usage: WriteWavefunctions <firstorb> <lastorb> <DestDir> [<optional EC options>]

firstorb = int(sys.argv[1]) # Index of first WF to write to file
lastorb = int(sys.argv[2]) # Index of last WF to write to file

opts = ''
if len(sys.argv)>3:
    for o in sys.argv[3:]:
        opts += ' %s'%o

# "Borrow" options object from EigenChannels
options = EC.GetOptions(opts)
Log.CreatePipeOutput(options)
label = SIO.GetFDFlineWithDefault(options.fn, 'SystemLabel', str, 'siesta', 'WriteWavefunctions')

# Read Hamiltonian
tshs = SIO.HS(label+'.TSHS')
geom = MG.Geom(label+'.XV')
options.DeviceAtoms = [1, geom.natoms]

# Build basis
basis = SIO.BuildBasis(options.fn, 1, geom.natoms, tshs.lasto)

# Which k-point?
tshs.setkpoint(options.kpoint)

# Solve generalized eigenvalue problem
for ispin in range(tshs.nspin):
    ev, es = SLA.eigh(tshs.H[ispin], tshs.S)
    for ii in range(firstorb, lastorb+1):
        print('\nORBITAL:', ii)
        v = es[:, ii]
        vd = N.conjugate(v)
        print('Eigenvalue <v|H|v>:', N.dot(vd, N.dot(tshs.H[ispin], v)))
        print('Normalization <v|S|v>:', N.dot(vd, N.dot(tshs.S, v)))
        fn = options.DestDir+'/%s.s%i_i%.3i_%.2feV'%(label, ispin, ii, ev[ii])
        EC.writeWavefunction(options, geom, basis, es[:, ii], fn=fn)
